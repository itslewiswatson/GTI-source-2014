----------------------------------------->>
-- GTI: Grand Theft International
-- Date: 09 Jan 2014
-- Resource: GTIbank/bankDatabase.slua
-- Type: Server Side
-- Author: JT Pennington (JTPenn)
----------------------------------------->>

-- Database Start
------------------>>

db = dbConnect("mysql", "dbname=gti;host=127.0.0.1", "GTI", "LpyYEF%pah4Z&N") 
dbExec(db, "CREATE TABLE IF NOT EXISTS `banking`(`name` TEXT)")

banking = {}

if (BACKUP_INTERVAL) then

function hourlyBackup()
	destroyElement(db)
	db = dbConnect("mysql", "dbname=gti;host=127.0.0.1", "GTI", "LpyYEF%pah4Z&N")
end
setTimer(hourlyBackup, 60000*BACKUP_INTERVAL, 1)

end

function cacheDatabase()
	dbQuery(cacheDatabase2, {}, db, "SELECT * FROM `banking`")
end
addEventHandler("onResourceStart", resourceRoot, cacheDatabase)

function cacheDatabase2(qh)
	local result = dbPoll(qh, -1)
	banking["Console"] = {}
	for i,row in ipairs(result) do
		banking[row.name] = {}
		for column,value in pairs(row) do
			if (column ~= "name") then
				if (value == nil) then value = "nil" end
				banking["Console"][column] = true
				banking[row.name][column] = value
			end
		end
	end
end

-- Account Exports
------------------->>

function setBankData(account, key, value)
	if (not account or not key) then return false end
	if (isGuestAccount(account) or type(key) ~= "string") then return false end
	if (type(key) == "string" or type(key) == "number") then
		local account = getAccountName( account )
		
		if (type(banking[account]) ~= "table") then
			banking[account] = {}
			dbExec(db, "INSERT INTO `banking`(name) VALUES(?)", account)
		end
		
		if (banking["Console"][key] == nil) then
			dbExec(db, "ALTER TABLE `banking` ADD `??` text", key)
			banking["Console"][key] = true
		end
		
		if (value ~= nil) then
			banking[account][key] = value
			dbExec(db, "UPDATE `banking` SET `??`=? WHERE name=?", key, tostring(value), account)
		else
			banking[account][key] = false
			dbExec(db, "UPDATE `banking` SET `??`=NULL WHERE name=?", key, account)
		end
		return true
	else return false end
end

function getBankData(account, key)
	if (not account or not key) then return nil end
	if (isGuestAccount(account) or type(key) ~= "string") then return nil end
	
	local account = getAccountName(account)
	if (banking[account] == nil) then return nil end
	if (banking[account][key] == nil or banking[account][key] == "nil") then return nil end
	
	if (key == "pin") then
		return banking[account][key]
	end
	return tonumber(banking[account][key]) or banking[account][key]
end
