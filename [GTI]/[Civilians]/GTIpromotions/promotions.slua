----------------------------------------->>
-- GTI: Grand Theft International
-- Date: 19 Dec 2013
-- Resource: GTIpromotions/promotions.slua
-- Type: Server Side
-- Author: JT Pennington (JTPenn)
----------------------------------------->>

MAX_EXPERIENCE = 25000000	-- Max Experience Earned (L50)
MAX_EXP_HOURS = 2600		-- Max Experience Time (L50)
MAX_LEVEL = 50				-- Max Level
HOURLY_EXP = 9615			-- Experience per Hour

MINIMUM_WAGE = 20500		-- Starting Hourly Wage

local expPoints = {}		-- Experience Points Anti-Cheat
local EXP_ANTICHEAT_CUTOFF = HOURLY_EXP * 1.33
local money = {}			-- Money Anti-Cheat

-- Job Data Exports
-------------------->>

function getJobRanks(job)
	local Ranks = exports.GTIpromoTable:getRanks()
	if (not Ranks[job]) then return false end
	return Ranks[job]
end

function getJobRankFromLevel(job, level)
	local Ranks = exports.GTIpromoTable:getRanks()
	if (not Ranks[job] or not Ranks[job][level]) then return false end
	return Ranks[job][level].name or false
end

function getJobMaxLevel(job)
	local Ranks = exports.GTIpromoTable:getRanks()
	if (not Ranks[job]) then return end
	local level = -1
	for lvl,tbl in pairs(Ranks[job]) do
		if (progress >= tbl.progress) then
			level = level + 1
		end
	end
	return level
end

function getJobLevelFromProgress(job, progress)
	local Ranks = exports.GTIpromoTable:getRanks()
	if (not Ranks[job] or type(progress) ~= "number") then return false end
	local level = -1
	for lvl,tbl in pairs(Ranks[job]) do
		if (progress >= tbl.progress) then
			level = level + 1
		end
	end
	return level or false
end

function getJobLevelRequirement(job, level)
	local Ranks = exports.GTIpromoTable:getRanks()
	if (not Ranks[job]) then return false end
	if (not Ranks[job][level]) then level = getJobMaxLevel(job) end
	return Ranks[job][level].progress or false
end

function getJobUnitName(job)
	local RankBase = exports.GTIpromoTable:getRankBase()
	if (not RankBase[job]) then return false end
	return RankBase[job].uName or false
end

-- Player Data Exports
----------------------->>

function getPaymentMethod(player, job)
	local Ranks = exports.GTIpromoTable:getRanks()
	if (not isElement(player) or not Ranks[job]) then return false end
	local account = getPlayerAccount(player)
	if (isGuestAccount(account)) then return false end
	
	local paymentMethod = GJD(account, "paymethod_"..string.lower(string.gsub(job," ",""))) or 1
	return paymentMethod
end

function getPlayerJobLevel(player, job)
	local Ranks = exports.GTIpromoTable:getRanks()
	if (not isElement(player) or not Ranks[job]) then return false end
	local account = getPlayerAccount(player)
	if (isGuestAccount(account)) then return false end
	
	local progress = getPlayerJobProgress(player, job) or 0
	return getJobLevelFromProgress(job, progress)
end

function getPlayerJobRank(player, job)
	local level = getPlayerJobLevel(player, job)
	return getJobRankFromLevel(job, level)
end

function getPlayerJobProgress(player, job)
	local Ranks = exports.GTIpromoTable:getRanks()
	if (not isElement(player) or not Ranks[job]) then return false end
	local account = getPlayerAccount(player)
	if (isGuestAccount(account)) then return false end
	
	local progress = GJD(account, "prog_"..string.lower(string.gsub(job," ",""))) or 0
	return progress
end

function getPlayerJobMoney(player, job)
	local Ranks = exports.GTIpromoTable:getRanks()
	if (not isElement(player) or not Ranks[job]) then return false end
	local account = getPlayerAccount(player)
	if (isGuestAccount(account)) then return false end
	
	local cash = GJD(account, "money_"..string.lower(string.gsub(job," ",""))) or 0
	return cash
end

function modifyPlayerJobProgress(player, job, progress)
	local Ranks = exports.GTIpromoTable:getRanks()
	if (not isElement(player) or not Ranks[job] or type(progress) ~= "number") then return false end
	local account = getPlayerAccount(player)
	if (isGuestAccount(account)) then return false end
	
	if (isExperienceAntiCheatEnabled(player)) then return false end
	
	local curProg = GJD(account, "prog_"..string.lower(string.gsub(job," ",""))) or 0
	SJD(account, "prog_"..string.lower(string.gsub(job," ","")), curProg+progress)
	return true
end

function givePlayerJobMoney(player, job, amount)
	local Ranks = exports.GTIpromoTable:getRanks()
	if (not isElement(player) or not Ranks[job] or type(amount) ~= "number") then return false end
	local account = getPlayerAccount(player)
	if (isGuestAccount(account)) then return false end
		-- Anti-Cheat
	local serial = getPlayerSerial(player)
	if (not money[serial]) then money[serial] = 0 end
	money[serial] = money[serial] + amount
	if (isMoneyAntiCheatEnabled(player)) then 
		outputChatBox("Anti-Cheat Triggered: You've gained a lot of money in this hour.", player, 255, 0, 0)
		local timeLeft = getTimerDetails(expTimer)
		local M = math.floor(timeLeft/60000)
		outputChatBox("You will not gain any more cash for the next "..M.." minutes.", player, 255, 0, 0)
		return false 
	end
	local cash = GJD(account, "money_"..string.lower(string.gsub(job," ",""))) or 0
	SJD(account, "money_"..string.lower(string.gsub(job," ","")), cash+amount)
	
	local method = getPaymentMethod(player, job)
	if (method == 1) then
		exports.GTIbank:GPM(player, amount, job..": Job Payment")
	else
		exports.GTIbank:modifyPlayerBankBalance(player, amount, job..": Job Payment")
	end
	return true
end

-- Experience System Exports
----------------------------->>

function getCivilianLevelFromExp(exper)
	if (type(exper) ~= "number") then return false end
	
	for lvl=0,50 do
			local expPoints = -math.sqrt(50^2-lvl^2)*52 + 2600
		expPoints = expPoints/MAX_EXP_HOURS
		expPoints = expPoints*MAX_EXPERIENCE
		if (expPoints > exper) then
			return lvl-1
		end
	end
end

function getCivilianLevelRequirement(level)
	if (type(level) ~= "number") then return false end
	if (level > 50) then level = 50 end
	if (level == 0) then return 0 end
		local expPoints = -math.sqrt(50^2-level^2)*52 + 2600
	expPoints = expPoints/MAX_EXP_HOURS
	expPoints = expPoints*MAX_EXPERIENCE
	return math.floor(expPoints)
end

function getHourlyExperience()
	return HOURLY_EXP
end

function getPlayerJobPayment(player, job)
	RankBase = exports.GTIpromoTable:getRankBase()
	if (not isElement(player) or not RankBase[job]) then return false end
	local RankBase = exports.GTIpromoTable:getRankBase()
	local levelPay = getPlayerHourlyPay(player)
	
	local hourlyPay = RankBase[job].basePay
	local payOffset = levelPay/MINIMUM_WAGE
	return hourlyPay*payOffset
end

function getPlayerHourlyPay(player)
	if (not isElement(player)) then return false end
	local level = getPlayerCivilianLevel(player)
		-- Hourly Pay Formula
	local pay = -math.sqrt(50^2-level^2)*4.49 + 245
	pay = math.floor(pay * 1000)
	
	return pay
end

function getPlayerCivilianLevel(player)
	if (not isElement(player)) then return false end
	local account = getPlayerAccount(player)
	if (isGuestAccount(account)) then return false end
	
	local experience = GJD(account, "experience") or 0
	return getCivilianLevelFromExp(experience)
end

function getPlayerCivilianExp(player, job)
	if (not isElement(player)) then return false end
	local account = getPlayerAccount(player)
	if (isGuestAccount(account)) then return false end
	
	local Ranks = exports.GTIpromoTable:getRanks()
	if (Ranks[job]) then
		local civExp = GJD(account, "exp_"..string.lower(string.gsub(job," ",""))) or 0
		return civExp
	end
	local civExp = GJD(account, "experience") or 0
	return civExp
end

local expTimer
function modifyPlayerCivilianExp(player, experience, job)
	if (not isElement(player) or type(experience) ~= "number") then return false end
	local account = getPlayerAccount(player)
	if (isGuestAccount(account)) then return false end
		-- Anti-Cheat
	local serial = getPlayerSerial(player)
	if (not expPoints[serial]) then expPoints[serial] = 0 end
	expPoints[serial] = expPoints[serial] + experience
	if (isExperienceAntiCheatEnabled(player)) then 
		outputChatBox("Anti-Cheat Triggered: You've gained a lot of experience points in this hour.", player, 255, 0, 0)
		local timeLeft = getTimerDetails(expTimer)
		local M = math.floor(timeLeft/60000)
		outputChatBox("You will not gain any more experience points or job progress for the next "..M.." minutes.", player, 255, 0, 0)
		return false 
	end
	
	local Ranks = exports.GTIpromoTable:getRanks()
	if (Ranks[job]) then
		local civExp = GJD(account, "exp_"..string.lower(string.gsub(job," ",""))) or 0
		SJD(account, "exp_"..string.lower(string.gsub(job," ","")), civExp+experience)
	end
	
	local civExp = GJD(account, "experience") or 0
	SJD(account, "experience", civExp+experience)
	return true
end

-- AntiCheat Functions
----------------------->>

function isExperienceAntiCheatEnabled(player)
	if (not isElement(player)) then return false end
	if ((expPoints[getPlayerSerial(player)] or 0) > EXP_ANTICHEAT_CUTOFF) then
		return true
	end
	return false
end

function decreaseAntiCheatExperience()
	for serial,_ in pairs(expPoints) do
		expPoints[serial] = 0
	end
end
expTimer = setTimer(decreaseAntiCheatExperience, 60000*60, 0)

function isMoneyAntiCheatEnabled(player)
	if (not isElement(player)) then return false end
	local moneyCutoff = getPlayerHourlyPay(player) * 1.33
	if ((money[getPlayerSerial(player)] or 0) > moneyCutoff) then
		return true
	end
	return false
end

function decreaseAntiCheatCash()
	for serial,_ in pairs(money) do
		money[serial] = 0
	end
end
expTimer = setTimer(decreaseAntiCheatCash, 60000*60, 0)
	