----------------------------------------->>
-- GTI: Grand Theft International
-- Date: 04 Mar 2014
-- Resource: GTIgroups/database.slua
-- Type: Server Side
-- Author: JT Pennington (JTPenn)
----------------------------------------->>

db = dbConnect("mysql", "dbname=gti;host=127.0.0.1", "GTI", "LpyYEF%pah4Z&N") 
dbExec(db, "CREATE TABLE IF NOT EXISTS `groups`(`id` INT NOT NULL AUTO_INCREMENT, PRIMARY KEY(id))")
dbExec(db, "CREATE TABLE IF NOT EXISTS `group_members`(`id` INT NOT NULL AUTO_INCREMENT, `name` TEXT, PRIMARY KEY(id))")
dbExec(db, "CREATE TABLE IF NOT EXISTS `group_ranks`(`id` INT NOT NULL AUTO_INCREMENT, PRIMARY KEY(id))")

Group = {}			-- Table of Group Database Cache
GroupMembers = {}	-- Table of Group Member Database Cache
GroupRanks = {}		-- Table of Group Ranks Database Cache

RanksByGroup = {}	-- Table of Rank ID's by group
MembersByGroup = {}	-- Table of Group Members by ID

maxGroupID = 0		-- Highest Group ID number
maxGroupRank = 0	-- Highest Group Rank Number

-- Cache Groups
---------------->>

addEventHandler("onResourceStart", resourceRoot, function()
	dbQuery(cacheGroupDatabase, {}, db, "SELECT * FROM `groups`")
end)

function cacheGroupDatabase(qh)
	local result = dbPoll(qh, 0)
	Group[0] = {}
	for i,row in ipairs(result) do
		Group[row.id] = {}
		for column,value in pairs(row) do
			if (column ~= "id") then
				if (not Group[0][column]) then
					Group[0][column] = true
				end
				if (value == "true") then value = true end
				if (value == "false") then value = false end
				Group[row.id][column] = value
				
				if (maxGroupID < row.id) then
					maxGroupID = row.id
				end
			end
		end
	end
end

-- Database Exports
-------------------->>

function setGroupData(id, key, value)
	if (not id or not key or not value) then return false end
	if (type(id) ~= "number" or type(key) ~= "string") then return false end
	if (type(key) == "string" or type(key) == "number") then
		if (type(Group[id]) ~= "table") then
			Group[id] = {}
			dbExec(db, "INSERT INTO `groups`(id) VALUES(?)", id)
		end
		
		if (Group[0][key] == nil) then
			dbExec(db, "ALTER TABLE `groups` ADD `??` text", key)
			Group[0][key] = true
		end
		
		Group[id][key] = value
		if (value ~= nil) then
			dbExec(db, "UPDATE `groups` SET `??`=? WHERE id=?", key, tostring(value), id)
		else
			dbExec(db, "UPDATE `groups` SET `??`=NULL WHERE id=?", key, id)
		end
		if (maxGroupID < id) then maxGroupID = id end
		return true
	else return false end
end

function getGroupData(id, key)
	if (not id or not key) then return nil end
	if (type(id) ~= "number" or type(key) ~= "string") then return nil end
	
	if (Group[id] == nil) then return nil end
	if (Group[id][key] == nil) then return nil end
	
	return tonumber(Group[id][key]) or Group[id][key]
end

-- Cache Group Members
----------------------->>

addEventHandler("onResourceStart", resourceRoot, function()
	dbQuery(cacheGroupMemberDatabase, {}, db, "SELECT * FROM `group_members`")
end)

function cacheGroupMemberDatabase(qh)
	local result = dbPoll(qh, 0)
	GroupMembers["Console"] = {}
	for i,row in ipairs(result) do
		GroupMembers[row.name] = {}
		for column,value in pairs(row) do
			if (column ~= "name") then
				if (not GroupMembers["Console"][column]) then
					GroupMembers["Console"][column] = true
				end
				if (value == "true") then value = true end
				if (value == "false") then value = false end
				GroupMembers[row.name][column] = value
					-- Associate Members by Group
				if (column == "id_group") then
					value = tonumber(value)
					if (not MembersByGroup[value]) then MembersByGroup[value] = {} end
					table.insert(MembersByGroup[value], row.name)
				end
			end
		end
	end
		-- Update Element Data
	setGroupOnStart()
end

-- Database Exports
-------------------->>

function setGroupMemberData(account, key, value)
	if (not account or not key or not value) then return false end
	if (isGuestAccount(account) or type(key) ~= "string") then return false end
	if (type(key) == "string" or type(key) == "number") then
		local account = getAccountName(account)
		
		if (type(GroupMembers[account]) ~= "table") then
			GroupMembers[account] = {}
			dbExec(db, "INSERT INTO `group_members`(name) VALUES(?)", account)
		end
		
		if (GroupMembers["Console"][key] == nil) then
			dbExec(db, "ALTER TABLE `group_members` ADD `??` text", key)
			GroupMembers["Console"][key] = true
		end
		
		GroupMembers[account][key] = value
		if (value ~= nil) then
			dbExec(db, "UPDATE `group_members` SET `??`=? WHERE name=?", key, tostring(value), account)
		else
			dbExec(db, "UPDATE `group_members` SET `??`=NULL WHERE name=?", key, account)
		end
		return true
	else return false end
end

function getGroupMemberData(account, key)
	if (not account or not key) then return nil end
	if (isGuestAccount(account) or type(key) ~= "string") then return nil end
	
	local account = getAccountName(account)
	if (GroupMembers[account] == nil) then return nil end
	if (GroupMembers[account][key] == nil) then return nil end
	
	return tonumber(GroupMembers[account][key]) or GroupMembers[account][key]
end

function dropGroupMemberData(account)
	if (not account or isGuestAccount(account)) then return false end
	
	local account = getAccountName(account)
	local groupID = GroupMembers[account]["id_group"]
	GroupMembers[account] = nil
	dbExec(db, "DELETE * FROM `group_members` WHERE name=?", account)
	
	for i,v in ipairs(MembersByGroup[groupID]) do
		if (v == account) then
			table.remove(MembersByGroup[groupID], i)
			break
		end
	end
	return true
end

-- Cache Group Ranks
--------------------->>

addEventHandler("onResourceStart", resourceRoot, function()
	dbQuery(cacheGroupRankDatabase, {}, db, "SELECT * FROM `group_ranks`")
end)

function cacheGroupRankDatabase(qh)
	local result = dbPoll(qh, 0)
	GroupRanks[0] = {}
	for i,row in ipairs(result) do
		GroupRanks[row.id] = {}
		for column,value in pairs(row) do
			if (column ~= "id") then
				if (not GroupRanks[0][column]) then
					GroupRanks[0][column] = true
				end
				if (value == "true") then value = true end
				if (value == "false") then value = false end
				GroupRanks[row.id][column] = value
					-- Update Highest Rank ID
				if (maxGroupRank < row.id) then
					maxGroupRank = row.id
				end
					-- Associate Group Ranks
				if (column == "parent_group") then
					value = tonumber(value)
					if (not RanksByGroup[value]) then RanksByGroup[value] = {} end
					table.insert(RanksByGroup[value], row.id)
				end
			end
		end
	end
end

-- Database Exports
-------------------->>

function setGroupRankData(id, key, value)
	if (not id or not key or not value) then return false end
	if (type(id) ~= "number" or type(key) ~= "string") then return false end
	if (type(key) == "string" or type(key) == "number") then
		if (type(GroupRanks[id]) ~= "table") then
			GroupRanks[id] = {}
			dbExec(db, "INSERT INTO `group_ranks`(id) VALUES(?)", id)
		end
		
		if (GroupRanks[0][key] == nil) then
			dbExec(db, "ALTER TABLE `group_ranks` ADD `??` text", key)
			GroupRanks[0][key] = true
		end
		
		GroupRanks[id][key] = value
		if (value ~= nil) then
			dbExec(db, "UPDATE `group_ranks` SET `??`=? WHERE id=?", key, tostring(value), id)
		else
			dbExec(db, "UPDATE `group_ranks` SET `??`=NULL WHERE id=?", key, id)
		end
			-- Increment Max Group Rank
		if (maxGroupRank < id) then maxGroupRank = id end
		return true
	else return false end
end

function getGroupRankData(id, key)
	if (not id or not key) then return nil end
	if (type(id) ~= "number" or type(key) ~= "string") then return nil end
	
	if (GroupRanks[id] == nil) then return nil end
	if (GroupRanks[id][key] == nil) then return nil end
	
	return tonumber(GroupRanks[id][key]) or GroupRanks[id][key]
end

-- Utilities
------------->>

function getNextGroupSlot()
	return maxGroupID+1
end

function getNextGroupRankSlot()
	return maxGroupRank+1
end
